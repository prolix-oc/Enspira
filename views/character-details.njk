{% extends "layout.njk" %}

{% block title %}{{ character.name }}{% endblock %}

{% block content %}
<div class="card character-header">
  <div class="character-avatar-large">
    <img src="{{ character.image }}" alt="{{ character.name }} Avatar" class="fade-in-image">
  </div>
  <div class="character-meta">
    <h1>{{ character.name }}</h1>
    <p class="author">by: {{ character.author }}</p>
    <p class="summary">{{ character.summary }}</p>
    <form action="/api/v1/gallery/{{ character.id }}/use" method="POST" data-async>
      <button type="submit" class="btn btn-primary btn-use-char">Use This Character</button>
    </form>
  </div>
</div>

<div class="card">
  <h2>Personality</h2>
  <div class="character-content-public">
    {% if character.personality.publicFmt %}
      {{ character.personality.publicFmt }}
    {% else %}
      <pre class="character-content">{{ character.personality }}</pre>
    {% endif %}
  </div>
</div>

<div class="card">
  <h2>Description</h2>
  <div class="character-content-public">
    {% if character.char_description.publicFmt %}
      {{ character.char_description.publicFmt }}
    {% else %}
      <pre class="character-content">{{ character.char_description }}</pre>
    {% endif %}
  </div>
</div>
{% endblock %}

{% block extraStyles %}
<style>
  .character-header {
    display: flex;
    gap: 30px;
    align-items: flex-start; /* Align items to the top */
  }

  .character-avatar-large {
    flex-shrink: 0;
    width: 200px;
    height: 200px;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid var(--border);
    background-color: var(--background);
  }

  .character-avatar-large img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top center; /* Align to top */
    display: block;
    opacity: 0; /* Start invisible */
    transition: opacity 0.5s ease-in-out;
  }
  
  .character-avatar-large img.loaded {
    opacity: 1; /* Fade in when loaded */
  }

  .character-meta {
    flex-grow: 1;
  }

  .character-meta h1 {
    margin-top: 0;
    margin-bottom: 5px;
  }

  .character-meta .author {
    color: var(--secondary-text);
    font-style: italic;
    margin-bottom: 15px;
  }

  .character-meta .summary {
    color: var(--primary-text);
    margin-bottom: 20px;
    font-size: 1.05em;
  }

  .character-content {
    background-color: var(--input-bg);
    padding: 15px;
    border-radius: 6px;
    white-space: pre-wrap; /* Allows wrapping */
    word-wrap: break-word; /* Ensures long words break */
    font-family: monospace;
    border: 1px solid var(--border);
  }
  
  .character-content-public {
    background-color: var(--input-bg);
    padding: 15px;
    border-radius: 6px;
    border: 1px solid var(--border);
    line-height: 1.5;
  }

  .btn-use-char {
    margin-top: 10px; /* Add some space above the button */
  }

  @media (max-width: 600px) {
    .character-header {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .character-avatar-large {
      width: 150px;
      height: 150px;
      margin-bottom: 15px;
    }
  }
</style>
{% endblock %}

{% block extraScripts %}
<script>
  // Add fade-in functionality for images
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.fade-in-image');
    
    images.forEach(img => {
      // For images that are already loaded from cache
      if (img.complete) {
        img.classList.add('loaded');
      } else {
        // For images that need to be loaded
        img.addEventListener('load', () => {
          img.classList.add('loaded');
        });
        
        // Fallback in case image fails to load
        img.addEventListener('error', () => {
          img.classList.add('loaded');
        });
      }
    });
  });
</script>
{% endblock %}