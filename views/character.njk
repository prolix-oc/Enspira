{% extends "layout.njk" %}

{% block title %}Character Editor{% endblock %}

{% block content %}
<div class="card">
  <div class="card-header">
    <h1>Character Editor</h1>
  </div>
  
  <p>Customize your AI assistant's personality, description, and behavior. These settings help define how your assistant interacts with your Twitch chat.</p>
  
  <div class="tabs">
    <div class="tab active" data-target="personality-tab">Personality</div>
    <div class="tab" data-target="description-tab">Description</div>
    <div class="tab" data-target="example-messages-tab">Example Messages</div>
    <div class="tab" data-target="features-tab">Features</div>
  </div>
  
  <div id="personality-tab" class="tab-content active">
    <form action="/api/v1/character/personality" method="POST" data-async>
      <div class="form-group">
        <label for="bot_name">Character Name</label>
        <input type="text" id="bot_name" name="bot_name" value="{{ character.bot_name }}" required>
        <p>This is the name your AI assistant will use.</p>
      </div>
      
      <div class="form-group">
        <label for="personality">Personality</label>
        <textarea id="personality" name="personality" rows="12" required>{{ characterPersonality }}</textarea>
        <p>Describe your assistant's personality traits, mannerisms, speaking style, interests, and attitudes.</p>
      </div>
      
      <button type="submit" class="btn btn-primary">Save Personality</button>
    </form>
  </div>
  
  <div id="description-tab" class="tab-content">
    <form action="/api/v1/character/description" method="POST" data-async>
      <div class="form-group">
        <label for="description">Physical Description</label>
        <textarea id="description" name="description" rows="12" required>{{ characterDescription }}</textarea>
        <p>Describe your assistant's appearance, physical attributes, clothing, and other visual aspects.</p>
      </div>
      
      <button type="submit" class="btn btn-primary">Save Description</button>
    </form>
  </div>
  
  <div id="example-messages-tab" class="tab-content">
    <form action="/api/v1/character/examples" method="POST" data-async>
      <div class="form-group">
        <label for="examples">Example Interactions</label>
        <textarea id="examples" name="examples" rows="15" required>{{ characterExamples }}</textarea>
        <p>Provide examples of how your assistant would respond to different situations. This helps establish the assistant's tone and style. Format as:</p>
        <pre style="background-color: var(--input-bg); padding: 10px; margin-top: 5px; border-radius: 6px;">
{{ character.bot_name }}: [Example response]

{{ character.bot_name }}: [Another response]</pre>
      </div>
      
      <button type="submit" class="btn btn-primary">Save Examples</button>
    </form>
  </div>
</div>

<div id="features-tab" class="tab-content">
  <form action="/api/v1/character/features" method="POST" data-async>
    <div class="form-group">
      <label for="funFacts">Fun Facts</label>
      <select id="funFacts" name="funFacts">
        <option value="true" {% if character.funFacts %}selected{% endif %}>Enabled</option>
        <option value="false" {% if not character.funFacts %}selected{% endif %}>Disabled</option>
      </select>
      <p>Enable your AI assistant to occasionally share interesting fun facts in chat.</p>
    </div>
    
    <div class="form-group">
      <label for="funFactsInterval">Fun Facts Interval (minutes)</label>
      <input type="number" id="funFactsInterval" name="funFactsInterval" value="{{ character.funFactsInterval or '30' }}" min="5" max="240">
      <p>How often should your assistant share fun facts? (5-240 minutes)</p>
    </div>
    
    <div class="form-group">
      <label for="tts_enabled">Text-to-Speech</label>
      <select id="tts_enabled" name="tts_enabled">
        <option value="true" {% if character.tts_enabled %}selected{% endif %}>Enabled</option>
        <option value="false" {% if not character.tts_enabled %}selected{% endif %}>Disabled</option>
      </select>
      <p>Enable your AI assistant to use text-to-speech for voice responses.</p>
    </div>
    
    <div class="form-group">
      <label for="ttsEqPref">Voice Quality Preset</label>
      <select id="ttsEqPref" name="ttsEqPref" {% if not character.tts_enabled %}disabled{% endif %}>
        <option value="clarity" {% if character.ttsEqPref == 'clarity' %}selected{% endif %}>Clarity</option>
        <option value="warm" {% if character.ttsEqPref == 'warm' %}selected{% endif %}>Warm</option>
        <option value="bright" {% if character.ttsEqPref == 'bright' %}selected{% endif %}>Bright</option>
        <option value="broadcast" {% if character.ttsEqPref == 'broadcast' %}selected{% endif %}>Broadcast</option>
      </select>
      <p>Choose a preset for your assistant's voice quality.</p>
    </div>
    
    <div class="form-group">
      <label for="ttsUpsamplePref">Audio Upsampling</label>
      <select id="ttsUpsamplePref" name="ttsUpsamplePref" {% if not character.tts_enabled %}disabled{% endif %}>
        <option value="true" {% if character.ttsUpsamplePref %}selected{% endif %}>Enabled</option>
        <option value="false" {% if not character.ttsUpsamplePref %}selected{% endif %}>Disabled</option>
      </select>
      <p>Enable audio upsampling for better voice quality (uses more CPU).</p>
    </div>
    
    <button type="submit" class="btn btn-primary">Save Features</button>
  </form>
</div>

{% endblock %}

{% block extraScripts %}
<script>
  // Auto-resize textareas as content grows
  document.addEventListener('DOMContentLoaded', () => {
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
      const adjustHeight = () => {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
      };
      
      // Initial adjustment
      adjustHeight();
      
      // Adjust on input
      textarea.addEventListener('input', adjustHeight);
      
      // Adjust when tab is shown
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
          setTimeout(adjustHeight, 10);
        });
      });
    });
    
    // Add toggle behavior for TTS fields
    const ttsEnabledSelect = document.getElementById('tts_enabled');
    const ttsRelatedFields = document.querySelectorAll('#ttsEqPref, #ttsUpsamplePref');
    
    if (ttsEnabledSelect) {
      const updateTtsFields = () => {
        const isEnabled = ttsEnabledSelect.value === 'true';
        ttsRelatedFields.forEach(field => {
          field.disabled = !isEnabled;
          // Update styling based on disabled state
          field.parentElement.style.opacity = isEnabled ? '1' : '0.5';
        });
      };
      
      // Initialize on page load
      updateTtsFields();
      
      // Update when changed
      ttsEnabledSelect.addEventListener('change', updateTtsFields);
    }
  });
</script>
{% endblock %}