{% extends "layout.njk" %}

{% block title %}Character Editor{% endblock %}

{% block content %}
<div class="card">
  <div class="card-header">
    <h1>Character Editor</h1>
  </div>
  
  <p>Customize your AI assistant's personality, description, and behavior. These settings help define how your assistant interacts with your Twitch chat.</p>
  
  <div class="tabs">
    <div class="tab active" data-target="personality-tab">Personality</div>
    <div class="tab" data-target="description-tab">Description</div>
    <div class="tab" data-target="example-messages-tab">Example Messages</div>
    <div class="tab" data-target="features-tab">Features</div>
  </div>
  
  <div id="personality-tab" class="tab-content active">
    <form action="/api/v1/character/personality" method="POST" data-async>
      <div class="form-group">
        <label for="bot_name">Character Name</label>
        <input type="text" id="bot_name" name="bot_name" value="{{ character.bot_name }}" required>
        <p>This is the name your AI assistant will use.</p>
      </div>
      
      <div class="form-group">
        <label for="personality">Personality</label>
        <textarea id="personality" name="personality" rows="12" required>{{ characterPersonality }}</textarea>
        <p>Describe your assistant's personality traits, mannerisms, speaking style, interests, and attitudes.</p>
      </div>
      
      <button type="submit" class="btn btn-primary">Save Personality</button>
    </form>
  </div>
  
  <div id="description-tab" class="tab-content">
    <form action="/api/v1/character/description" method="POST" data-async>
      <div class="form-group">
        <label for="description">Physical Description</label>
        <textarea id="description" name="description" rows="12" required>{{ characterDescription }}</textarea>
        <p>Describe your assistant's appearance, physical attributes, clothing, and other visual aspects.</p>
      </div>
      
      <button type="submit" class="btn btn-primary">Save Description</button>
    </form>
  </div>
  
  <div id="example-messages-tab" class="tab-content">
    <form action="/api/v1/character/examples" method="POST" data-async>
      <div class="form-group">
        <label for="examples">Example Interactions</label>
        <textarea id="examples" name="examples" rows="15" required>{{ characterExamples }}</textarea>
        <p>Provide examples of how your assistant would respond to different situations. This helps establish the assistant's tone and style. Format as:</p>
        <pre style="background-color: var(--input-bg); padding: 10px; margin-top: 5px; border-radius: 6px;">
{{ character.bot_name }}: [Example response]

{{ character.bot_name }}: [Another response]</pre>
      </div>
      
      <button type="submit" class="btn btn-primary">Save Examples</button>
    </form>
  </div>
</div>

<div id="features-tab" class="tab-content">
  <form action="/api/v1/character/features" method="POST" data-async>
    <div class="form-group">
      <label for="funFacts">Fun Facts</label>
      <select id="funFacts" name="funFacts">
        <option value="true" {% if character.funFacts %}selected{% endif %}>Enabled</option>
        <option value="false" {% if not character.funFacts %}selected{% endif %}>Disabled</option>
      </select>
      <p>Enable your AI assistant to occasionally share interesting fun facts in chat.</p>
    </div>
    
    <div class="form-group">
      <label for="funFactsInterval">Fun Facts Interval (minutes)</label>
      <input type="number" id="funFactsInterval" name="funFactsInterval" value="{{ character.funFactsInterval or '30' }}" min="5" max="240">
      <p>How often should your assistant share fun facts? (5-240 minutes)</p>
    </div>
    
    <div class="form-group">
      <label for="tts_enabled">Text-to-Speech</label>
      <select id="tts_enabled" name="tts_enabled">
        <option value="true" {% if character.tts_enabled %}selected{% endif %}>Enabled</option>
        <option value="false" {% if not character.tts_enabled %}selected{% endif %}>Disabled</option>
      </select>
      <p>Enable your AI assistant to use text-to-speech for voice responses.</p>
    </div>
    
    <div class="form-group">
      <label for="ttsEqPref">Voice Quality Preset</label>
      <select id="ttsEqPref" name="ttsEqPref" {% if not character.tts_enabled %}disabled{% endif %}>
        <option value="clarity" {% if character.ttsEqPref == 'clarity' %}selected{% endif %}>Clarity</option>
        <option value="warm" {% if character.ttsEqPref == 'warm' %}selected{% endif %}>Warm</option>
        <option value="bright" {% if character.ttsEqPref == 'bright' %}selected{% endif %}>Bright</option>
        <option value="broadcast" {% if character.ttsEqPref == 'broadcast' %}selected{% endif %}>Broadcast</option>
      </select>
      <p>Choose a preset for your assistant's voice quality.</p>
    </div>
    
    <div class="form-group">
      <label for="ttsUpsamplePref">Audio Upsampling</label>
      <select id="ttsUpsamplePref" name="ttsUpsamplePref" {% if not character.tts_enabled %}disabled{% endif %}>
        <option value="true" {% if character.ttsUpsamplePref %}selected{% endif %}>Enabled</option>
        <option value="false" {% if not character.ttsUpsamplePref %}selected{% endif %}>Disabled</option>
      </select>
      <p>Enable audio upsampling for better voice quality (uses more CPU).</p>
    </div>
    
    <button type="submit" class="btn btn-primary">Save Features</button>
  </form>

   <div class="card" style="margin-top: 20px;">
    <h3>Custom Voice Upload</h3>
    <p>Upload up to 4 WAV audio samples of your character's voice. Files must be mono, 16-bit, 22050Hz or 44100Hz, ≤20 seconds, and under 3MB each.</p>
    
    {% if character.speaker_file %}
    <div class="alert alert-success">
      <p>Voice samples configured: <strong>{{ character.speaker_file }}</strong></p>
    </div>
    {% endif %}
    
    <form id="voice-upload-form" action="/api/v1/character/voice-upload" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="voice-files">Voice Samples (WAV files only)</label>
        <input type="file" id="voice-files" name="voice-files" accept="audio/wav" multiple class="form-control">
        <div id="file-list" class="mt-2"></div>
        <div id="validation-message" class="alert alert-error" style="display: none; margin-top: 10px;"></div>
      </div>
      
      <button type="submit" id="upload-btn" class="btn btn-primary" disabled>Upload Voice Samples</button>
    </form>
  </div>
</div>

{% endblock %}

{% block extraScripts %}
<script>
  // Auto-resize textareas as content grows
  document.addEventListener('DOMContentLoaded', () => {
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
      const adjustHeight = () => {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
      };
      
      // Initial adjustment
      adjustHeight();
      
      // Adjust on input
      textarea.addEventListener('input', adjustHeight);
      
      // Adjust when tab is shown
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
          setTimeout(adjustHeight, 10);
        });
      });
    });
    
    // Add toggle behavior for TTS fields
    const ttsEnabledSelect = document.getElementById('tts_enabled');
    const ttsRelatedFields = document.querySelectorAll('#ttsEqPref, #ttsUpsamplePref');
    
    if (ttsEnabledSelect) {
      const updateTtsFields = () => {
        const isEnabled = ttsEnabledSelect.value === 'true';
        ttsRelatedFields.forEach(field => {
          field.disabled = !isEnabled;
          // Update styling based on disabled state
          field.parentElement.style.opacity = isEnabled ? '1' : '0.5';
        });
      };
      
      // Initialize on page load
      updateTtsFields();
      
      // Update when changed
      ttsEnabledSelect.addEventListener('change', updateTtsFields);
    }
    
    // Voice file upload handling
    const voiceFileInput = document.getElementById('voice-files');
    const fileList = document.getElementById('file-list');
    const validationMessage = document.getElementById('validation-message');
    const uploadBtn = document.getElementById('upload-btn');
    const uploadForm = document.getElementById('voice-upload-form');
    
    if (voiceFileInput) {
      voiceFileInput.addEventListener('change', async (e) => {
        // Clear previous validation messages
        validationMessage.style.display = 'none';
        validationMessage.textContent = '';
        fileList.innerHTML = '';
        uploadBtn.disabled = true;
        
        const files = Array.from(e.target.files);
        
        // Check number of files
        if (files.length > 4) {
          validationMessage.textContent = 'Please select a maximum of 4 files.';
          validationMessage.style.display = 'block';
          voiceFileInput.value = '';
          return;
        }
        
        if (files.length === 0) {
          return;
        }
        
        let validFiles = true;
        const fileInfoPromises = files.map(file => validateAudioFile(file));
        
        // Wait for all validations to complete
        const fileResults = await Promise.all(fileInfoPromises);
        
        // Process validation results
        fileResults.forEach((result, index) => {
          const file = files[index];
          const fileItem = document.createElement('div');
          fileItem.classList.add('file-item');
          
          if (result.valid) {
            fileItem.innerHTML = `<span style="color: var(--success);">✓</span> ${file.name} (${(file.size / 1024).toFixed(1)} KB, ${result.duration.toFixed(1)}s)`;
          } else {
            validFiles = false;
            fileItem.innerHTML = `<span style="color: var(--error);">✗</span> ${file.name}: ${result.reason}`;
          }
          
          fileList.appendChild(fileItem);
        });
        
        // Update upload button state
        uploadBtn.disabled = !validFiles;
        
        // Show validation message if needed
        if (!validFiles) {
          validationMessage.textContent = 'One or more files do not meet the requirements. Please fix the issues above.';
          validationMessage.style.display = 'block';
        }
      });
      
      // File upload form submission handler
      uploadForm.addEventListener('submit', (e) => {
        // Show loading state
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<span class="loading"></span> Uploading...';
        
        // Form will be submitted normally, no need to prevent default
      });
    }
    
    // Audio file validation function
    // Audio file validation function
    async function validateAudioFile(file) {
      // Check file size (3MB limit)
      if (file.size > 3 * 1024 * 1024) {
        return {
          valid: false,
          reason: 'File exceeds 3MB size limit'
        };
      }
      
      // Check file extension
      if (!file.name.toLowerCase().endsWith('.wav')) {
        return {
          valid: false,
          reason: 'Only WAV files are accepted'
        };
      }
      
      try {
        // Read audio metadata from file
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const arrayBuffer = await file.arrayBuffer();
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        
        const duration = audioBuffer.duration;
        const numChannels = audioBuffer.numberOfChannels;
        const sampleRate = audioBuffer.sampleRate;
        
        console.log(`Audio file ${file.name} properties:`, {
          duration,
          numChannels,
          sampleRate,
          size: file.size
        });
        
        // Validate audio parameters
        if (duration > 20) {
          return {
            valid: false,
            reason: `Duration exceeds 20 seconds (${duration.toFixed(1)}s)`
          };
        }
        
        if (numChannels !== 1) {
          return {
            valid: false,
            reason: `File must be mono (has ${numChannels} channels)`
          };
        }
        
        // Accept common sample rates - browsers sometimes report different rates
        // 22050Hz and 44100Hz are both acceptable for XTTS
        const acceptableSampleRates = [22050, 44100];
        const closestRate = acceptableSampleRates.reduce((prev, curr) => 
          (Math.abs(curr - sampleRate) < Math.abs(prev - sampleRate) ? curr : prev)
        );
        
        // Allow some variance (within 5% of target rate)
        if (Math.abs(sampleRate - closestRate) / closestRate > 0.05) {
          return {
            valid: false,
            reason: `Sample rate should be 22050Hz or 44100Hz (found ${sampleRate}Hz)`
          };
        }
        
        // All checks passed
        return {
          valid: true,
          duration: duration,
          channels: numChannels,
          sampleRate: sampleRate,
          closestStandardRate: closestRate
        };
      } catch (error) {
        console.error('Audio validation error:', error);
        return {
          valid: false,
          reason: 'Failed to analyze audio file. Make sure it\'s a valid WAV file.'
        };
      }
    }
  });
</script>
{% endblock %}